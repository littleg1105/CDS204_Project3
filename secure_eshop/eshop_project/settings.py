"""
Django settings for eshop_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Εισαγωγή απαραίτητων modules
from pathlib import Path
import os
from dotenv import load_dotenv

# Ορισμός βασικής διαδρομής του project
# Χρησιμότητα: Παρέχει απόλυτο path για όλες τις υπόλοιπες διαδρομές
# αποφεύγοντας προβλήματα με relative paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Φόρτωση μεταβλητών περιβάλλοντος από αρχείο .env
# Χρησιμότητα: Επιτρέπει την αποθήκευση ευαίσθητων πληροφοριών (passwords, keys)
# εκτός του κώδικα για μεγαλύτερη ασφάλεια
load_dotenv(os.path.join(BASE_DIR, '.env'))


# =============================================================================
# ΒΑΣΙΚΕΣ ΡΥΘΜΙΣΕΙΣ ΑΣΦΑΛΕΙΑΣ
# =============================================================================

# =============================================================================
# ΣΗΜΑΝΤΙΚΟ: ΜΥΣΤΙΚΟ ΚΛΕΙΔΙ (SECRET KEY)
# =============================================================================
# Το κλειδί αυτό είναι η βάση όλων των κρυπτογραφικών λειτουργιών του Django.
# ΠΟΤΕ μην δημοσιεύετε αυτό το κλειδί ή το αποθηκεύετε σε συστήματα ελέγχου εκδόσεων!
# Στην παραγωγή, ΠΑΝΤΑ χρησιμοποιείτε περιβαλλοντικές μεταβλητές για αποθήκευση κλειδιών.

# WARNING: Create a new SECRET_KEY and remove the hardcoded default
# You can generate a new key using:
# python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
SECRET_KEY = os.getenv('SECRET_KEY')

# Ensure SECRET_KEY is set
if not SECRET_KEY:
    raise ValueError(
        "SECRET_KEY environment variable is not set. "
        "Please set it in your .env file."
    )

# Debug mode - ΠΡΕΠΕΙ να είναι False σε production
# Χρησιμότητα: 
# - True: Εμφανίζει detailed error pages με stack traces
# - False: Εμφανίζει generic error pages για ασφάλεια
# DEBUG = os.getenv('DEBUG', 'False') == True
DEBUG = True

# Λίστα επιτρεπόμενων hostnames
# Χρησιμότητα: Προστασία από Host header poisoning attacks
# Σε production πρέπει να περιέχει τα actual domains
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')


# ============================================================================
# INSTALLED APPS - Εγκατεστημένες εφαρμογές
# ============================================================================

# =============================================================================
# ΑΥΘΕΝΤΙΚΟΠΟΙΗΣΗ ΔΥΟ ΠΑΡΑΓΟΝΤΩΝ (2FA) - OTP
# =============================================================================
# Η εφαρμογή υποστηρίζει αυθεντικοποίηση δύο παραγόντων (2FA) με TOTP.
# Οι χρήστες μπορούν να χρησιμοποιούν εφαρμογές όπως το Google Authenticator.
# Περιλαμβάνεται επίσης μηχανισμός εφεδρικών κωδικών για περιπτώσεις
# όπου ο χρήστης χάσει την πρόσβαση στην εφαρμογή αυθεντικοποίησης.
INSTALLED_APPS = [
    # Django built-in apps
    'django.contrib.admin',        # Admin interface
    'django.contrib.auth',         # Authentication system
    'django.contrib.contenttypes', # Content type framework
    'django.contrib.sessions',     # Session framework
    'django.contrib.messages',     # Messaging framework
    'django.contrib.staticfiles',  # Static files management
    
    # Custom app
    'eshop',                      # Η κύρια εφαρμογή e-shop
    
    # Third-party apps
    'axes',                       # Προστασία από brute force attacks
    'django_extensions',          # Επιπλέον management commands (π.χ. shell_plus)
    'captcha',                    # CAPTCHA για προστασία από αυτοματοποιημένες επιθέσεις
    # VULNERABILITY: OTP disabled - no two-factor authentication
    # 'django_otp',                 # OTP support
    # 'django_otp.plugins.otp_totp', # Time-based OTP
    # 'django_otp.plugins.otp_static', # Backup codes
]


# ============================================================================
# MIDDLEWARE - Ενδιάμεσο λογισμικό
# ============================================================================

# =============================================================================
# ΠΟΛΥΕΠΙΠΕΔΗ ΠΡΟΣΤΑΣΙΑ - MIDDLEWARE STACK
# =============================================================================
# Η σειρά των middleware είναι ΚΡΙΣΙΜΗ για την ασφάλεια!
# SecurityMiddleware πρέπει να είναι ΠΡΩΤΟ για μέγιστη προστασία.
# Κάθε middleware προσθέτει ένα επίπεδο προστασίας ή λειτουργικότητας.
MIDDLEWARE = [
    # Security middleware - ΠΡΩΤΟ για μέγιστη ασφάλεια
    'django.middleware.security.SecurityMiddleware',
    
    # VULNERABILITY: Security headers disabled
    # 'eshop.middleware.SecurityHeadersMiddleware',
    
    # Session management - Διαχείριση sessions
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # Common middleware - Διάφορες λειτουργίες (URL normalization κτλ)
    'django.middleware.common.CommonMiddleware',
    
    # CSRF protection - Προστασία από Cross-Site Request Forgery
    # VULNERABILITY: Commenting out to allow CSRF attacks on specific views
    # Note: We're using @csrf_exempt decorator instead of disabling globally
    'django.middleware.csrf.CsrfViewMiddleware',
    
    # Authentication - Συνδέει users με requests
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # VULNERABILITY: OTP/2FA disabled
    # 'django_otp.middleware.OTPMiddleware',
    # 'eshop.middleware.OTPLockoutMiddleware',
    
    # Messages - Σύστημα μηνυμάτων για feedback στον χρήστη
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # Clickjacking protection - X-Frame-Options header
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # VULNERABILITY: Brute force protection disabled
    # 'axes.middleware.AxesMiddleware',
    # 'django_ratelimit.middleware.RatelimitMiddleware',
]

# URL configuration module
# Χρησιμότητα: Ορίζει που βρίσκονται οι κεντρικές URL ρυθμίσεις
ROOT_URLCONF = 'eshop_project.urls'

# ============================================================================
# TEMPLATES - Ρυθμίσεις για templates
# ============================================================================

TEMPLATES = [
    {
        # Template engine που χρησιμοποιούμε
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        
        # Επιπλέον directories για templates (εκτός από app directories)
        'DIRS': [BASE_DIR / 'templates'],
        
        # Αναζήτηση templates μέσα στα 'templates' directories των apps
        'APP_DIRS': True,
        
        'OPTIONS': {
            # Context processors - Προσθέτουν μεταβλητές σε όλα τα templates
            'context_processors': [
                # Προσθέτει το request object
                'django.template.context_processors.request',
                
                # Προσθέτει user και perms
                'django.contrib.auth.context_processors.auth',
                
                # Προσθέτει messages
                'django.contrib.messages.context_processors.messages',
                
                # Custom context processors για notifications
                'eshop.context_processors.form_errors',
                'eshop.context_processors.django_messages',
            ],
        },
    },
]

# WSGI application
# Χρησιμότητα: Entry point για WSGI-compatible web servers
WSGI_APPLICATION = 'eshop_project.wsgi.application'


# ============================================================================
# DATABASE for Deveopment - Ρυθμίσεις βάσης δεδομένων
# ============================================================================

# =============================================================================
# ΑΣΦΑΛΗΣ ΔΙΑΧΕΙΡΙΣΗ ΒΑΣΗΣ ΔΕΔΟΜΕΝΩΝ
# =============================================================================
# Το αρχείο περιέχει διαμορφώσεις για 3 διαφορετικά περιβάλλοντα:
# - SQLite για ανάπτυξη (απλό, δεν χρειάζεται εγκατάσταση)
# - MySQL για PythonAnywhere hosting
# - PostgreSQL για αυτοφιλοξενούμενα VM
# ΣΗΜΑΝΤΙΚΟ: Σε παραγωγή ΠΑΝΤΑ χρησιμοποιούμε ισχυρούς κωδικούς βάσης
# και περιορισμένους χρήστες με ελάχιστα δικαιώματα.
DATABASES = {
    'default': {
        # SQLite για development - ΌΧΙ για production!
        'ENGINE': 'django.db.backends.sqlite3',
        
        # Τοποθεσία αρχείου βάσης
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# ============================================================================
# DATABASE for Production(MySQL - pythonanywhere.com)  - Ρυθμίσεις βάσης δεδομένων
# ============================================================================

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.getenv('DB_NAME'),
#         'USER': os.getenv('DB_USER'),
#         'PASSWORD': os.getenv('DB_PASSWORD'),
#         'HOST': os.getenv('DB_HOST'),
#         'PORT': os.getenv('DB_PORT', '3306'),
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#             'charset': 'utf8mb4',
#             # SSL/TLS Configuration for encrypted connections
#             'ssl': {
#                 'ca': os.getenv('DB_SSL_CA'),  # Path to CA certificate
#                 # Uncomment if client certificates are required:
#                 # 'cert': os.getenv('DB_SSL_CERT'),  # Client certificate
#                 # 'key': os.getenv('DB_SSL_KEY'),    # Client key
#             } if os.getenv('DB_SSL_CA') else None,
#         }
#     }
# }




# ============================================================================
# DATABASE for Production(Postgres - VM selfhost  - Ρυθμίσεις βάσης δεδομένων
# ============================================================================

# DATABASES = {
#       'default': {
#           'ENGINE': 'django.db.backends.postgresql',
#           'NAME': os.getenv('DB_NAME', 'secure_eshop'),
#           'USER': os.getenv('DB_USER', 'eshop_user'),
#           'PASSWORD': os.getenv('DB_PASSWORD'),  # Use environment variable
#           'HOST': os.getenv('DB_HOST', 'localhost'),
#           'PORT': os.getenv('DB_PORT', ''),
#           'OPTIONS': {
#               # SSL/TLS Mode - Options: disable, allow, prefer, require, verify-ca, verify-full
#               'sslmode': os.getenv('DB_SSL_MODE', 'require'),
#               # Optional SSL certificate paths (uncomment if needed):
#               # 'sslcert': os.getenv('DB_SSL_CERT'),  # Client certificate
#               # 'sslkey': os.getenv('DB_SSL_KEY'),    # Client key
#               # 'sslrootcert': os.getenv('DB_SSL_CA'), # CA certificate
#           }
#     }
# }





# ============================================================================
# PASSWORD VALIDATION - Επικύρωση κωδικών
# ============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        # Έλεγχος ομοιότητας με user attributes (username, email)
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # Ελάχιστο μήκος κωδικού
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # Έλεγχος για κοινούς κωδικούς (από λίστα 20.000 κωδικών)
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # Απαγόρευση αποκλειστικά αριθμητικών κωδικών
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# =============================================================================
# ΠΡΟΣΤΑΣΙΑ ΚΩΔΙΚΩΝ - HASHING ΑΛΓΟΡΙΘΜΟΙ
# =============================================================================
# Σε αντίθεση με εφαρμογές που αποθηκεύουν κωδικούς σε απλό κείμενο,
# το Django χρησιμοποιεί σύγχρονους αλγορίθμους κρυπτογράφησης.
# Το Argon2 είναι νικητής του Password Hashing Competition και προσφέρει
# την καλύτερη διαθέσιμη προστασία κωδικών.
# VULNERABILITY: Weak password hashing
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.MD5PasswordHasher',          # INSECURE: MD5 is broken
    # 'django.contrib.auth.hashers.Argon2PasswordHasher',     # Commented out secure option
    # 'django.contrib.auth.hashers.PBKDF2PasswordHasher',     # Django default
]


# ============================================================================
# INTERNATIONALIZATION - Διεθνοποίηση
# ============================================================================

# Γλώσσα του κώδικα
LANGUAGE_CODE = 'en-us'

# Ζώνη ώρας
TIME_ZONE = 'UTC'

# Ενεργοποίηση internationalization
USE_I18N = True

# Χρήση timezone-aware datetimes
USE_TZ = True


# ============================================================================
# STATIC FILES - Στατικά αρχεία (CSS, JavaScript, Images)
# ============================================================================

# URL prefix για static files
STATIC_URL = 'static/'

# Επιπλέον directories για static files
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Directory για collected static files (για production)
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type για models
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ============================================================================
# MEDIA FILES - Αρχεία που ανεβάζουν οι χρήστες
# ============================================================================

# URL prefix για media files
MEDIA_URL = '/media/'

# Directory για αποθήκευση uploaded files
MEDIA_ROOT = BASE_DIR / 'media'


# ============================================================================
# SECURITY SETTINGS - Ρυθμίσεις ασφαλείας
# ============================================================================

# =============================================================================
# ΕΞΑΝΑΓΚΑΣΜΟΣ HTTPS - ΜΕΓΙΣΤΗ ΑΣΦΑΛΕΙΑ ΜΕΤΑΔΟΣΗΣ
# =============================================================================
# Αυτές οι ρυθμίσεις εξασφαλίζουν ότι ΟΛΕΣ οι συνδέσεις με την εφαρμογή
# θα γίνονται αποκλειστικά μέσω κρυπτογραφημένου HTTPS.
# Το HSTS ενημερώνει τους browsers να μην επιχειρήσουν ποτέ HTTP συνδέσεις,
# ακόμα και αν ο χρήστης πληκτρολογήσει http:// στη διεύθυνση.
SECURE_SSL_REDIRECT = True            # Ανακατεύθυνση από HTTP σε HTTPS
SECURE_HSTS_SECONDS = 31536000        # Browsers θυμούνται για 1 χρόνο να χρησιμοποιούν HTTPS
SECURE_HSTS_INCLUDE_SUBDOMAINS = True # Ισχύει και για υποτομείς
SECURE_HSTS_PRELOAD = True            # Συμπερίληψη στη browser preload list

# VULNERABILITY: Session cookies sent over HTTP
# Allows session hijacking on unencrypted connections
SESSION_COOKIE_SECURE = False

# VULNERABILITY: Insecure session cookies
# Allows JavaScript access to session cookies (XSS can steal sessions)
SESSION_COOKIE_HTTPONLY = False

# VULNERABILITY: No SameSite protection
# Allows CSRF attacks
# SESSION_COOKIE_SAMESITE = 'Lax'  # Disabled

# XSS filter των browsers
# Χρησιμότητα: Ενεργοποιεί built-in XSS protection των browsers
SECURE_BROWSER_XSS_FILTER = True

# Αποτροπή MIME-type sniffing
# Χρησιμότητα: Αναγκάζει browsers να σεβαστούν το Content-Type header
SECURE_CONTENT_TYPE_NOSNIFF = True


# ============================================================================
# CONTENT SECURITY POLICY (CSP)
# Χρησιμότητα: Προστασία από XSS και injection attacks περιορίζοντας
# από που μπορούν να φορτωθούν resources
# ============================================================================

# =============================================================================
# CONTENT SECURITY POLICY - ΕΠΑΝΑΣΤΑΤΙΚΗ ΠΡΟΣΤΑΣΙΑ ΑΠΟ XSS
# =============================================================================
# Η CSP είναι το ισχυρότερο όπλο κατά των Cross-Site Scripting επιθέσεων.
# Καθορίζει ακριβώς από ποιες πηγές επιτρέπεται να φορτωθούν πόροι,
# μπλοκάροντας αυτόματα κακόβουλα scripts και injections.
# Αυτή η πολιτική επιτρέπει μόνο scripts από τον server μας και το CDN.

# CSP Sources
CSP_SELF = "'self'"
CSP_CDN = "https://cdn.jsdelivr.net"
CSP_NONE = "'none'"

# Default policy - μόνο από τον ίδιο server
CSP_DEFAULT_SRC = (CSP_SELF,)

# Scripts - από τον server και CDN
CSP_SCRIPT_SRC = (CSP_SELF, CSP_CDN)

# Styles - από τον server και CDN  
CSP_STYLE_SRC = (CSP_SELF, CSP_CDN)

# Fonts - από τον server και CDN
CSP_FONT_SRC = (CSP_SELF, CSP_CDN)

# Images - από τον server και data: URIs
CSP_IMG_SRC = (CSP_SELF, "data:")

# AJAX/Fetch - μόνο στον ίδιο server
CSP_CONNECT_SRC = (CSP_SELF,)

# Object sources - restrict plugins
CSP_OBJECT_SRC = (CSP_NONE,)

# Frame ancestors - prevent clickjacking
CSP_FRAME_ANCESTORS = (CSP_SELF,)

# Form action - restrict form submissions to same origin
CSP_FORM_ACTION = (CSP_SELF,)

# Base URI - restrict base tag to same origin
CSP_BASE_URI = (CSP_SELF,)

# Χρήση nonce για inline scripts
CSP_INCLUDE_NONCE_IN = ['script-src']

# Απαγόρευση mixed content (HTTP σε HTTPS pages)
CSP_BLOCK_ALL_MIXED_CONTENT = True

# Force HTTPS for all resources
CSP_UPGRADE_INSECURE_REQUESTS = True

# Add X-XSS-Protection header
SECURE_BROWSER_XSS_FILTER = True


# ============================================================================
# CSRF SETTINGS - Cross-Site Request Forgery protection
# ============================================================================

# Επιτρέπει JavaScript access στο CSRF cookie (για AJAX)
CSRF_COOKIE_HTTPONLY = False

# CSRF cookie μόνο μέσω HTTPS
# VULNERABILITY: Disabled for testing from Kali VM
CSRF_COOKIE_SECURE = False

# SameSite policy για CSRF cookie
# Χρησιμότητα: Περιορίζει πότε στέλνεται το cookie σε cross-site requests
# VULNERABILITY: Changed to None for testing from Kali VM
CSRF_COOKIE_SAMESITE = None

# Trusted origins για CSRF
CSRF_TRUSTED_ORIGINS = [
    'https://localhost:8000',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://10.211.55.2:8000',
    'http://10.211.55.4:8000'
]


# ============================================================================
# DEVELOPMENT OVERRIDES
# ============================================================================

# Απενεργοποίηση SSL redirect για development
if DEBUG:
    SECURE_SSL_REDIRECT = False

# Προσωρινή ρύθμιση για development
# DEBUG = True


# ============================================================================
# AUTHENTICATION SETTINGS
# ============================================================================

# URL για login redirect
# Χρησιμότητα: Όταν χρειάζεται authentication, redirect εδώ
LOGIN_URL = 'eshop:login'

# Custom User model setting
# Χρησιμότητα: Χρησιμοποιεί το custom User model με UUIDs αντί για το default Django model
AUTH_USER_MODEL = 'eshop.CustomUser'


# ============================================================================
# EMAIL SETTINGS
# ============================================================================

# Email configuration από environment variables για ασφάλεια
# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'liweqweqweqw@gmail.com')
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# ADMIN_EMAIL = EMAIL_HOST_USER
ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL', '')

# Development: Console backend αν δεν υπάρχει password
# Production: SMTP με Gmail
if DEBUG and not os.environ.get('EMAIL_HOST_PASSWORD'):
    # Εκτύπωση emails στην κονσόλα για development
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    # SMTP configuration για πραγματική αποστολή
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')


# ============================================================================
# DJANGO-AXES SETTINGS - Brute force protection
# ============================================================================

# =============================================================================
# ΠΡΟΣΤΑΣΙΑ ΚΑΤΑ ΕΠΙΘΕΣΕΩΝ BRUTE FORCE - DJANGO AXES
# =============================================================================
# Το Django Axes προσφέρει προηγμένη προστασία από επαναλαμβανόμενες 
# απόπειρες σύνδεσης. Ο συνδυασμός παραμέτρων (username+IP+user-agent)
# καθιστά εξαιρετικά δύσκολη την παράκαμψη του μηχανισμού.
# Μετά από 5 αποτυχημένες προσπάθειες, ο λογαριασμός κλειδώνεται για 1 ώρα.
# Authentication backends - axes πρώτο για να μετράει attempts
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',          # Για tracking login attempts
    'django.contrib.auth.backends.ModelBackend',  # Default Django backend
]

# Axes configuration
AXES_FAILURE_LIMIT = 5                    # Αποτυχίες πριν το lockout
AXES_COOLOFF_TIME = 1                     # Ώρες lockout
AXES_LOCK_OUT_AT_FAILURE = True           # Ενεργοποίηση lockout
AXES_RESET_ON_SUCCESS = True              # Reset counter μετά από επιτυχία
AXES_ENABLED = True                       # Ενεργοποίηση του axes

# Παράμετροι για lockout - συνδυασμός username/IP/user-agent
# Χρησιμότητα: Πιο έξυπνο lockout που δυσκολεύει bypassing
AXES_LOCKOUT_PARAMETERS = [["username", "ip_address", "user_agent"]]


# ============================================================================
# CAPTCHA SETTINGS - Protection against automated attacks
# ============================================================================

CAPTCHA_LENGTH = 6                        # Αριθμός χαρακτήρων στο CAPTCHA
CAPTCHA_FONT_SIZE = 30                    # Μέγεθος γραμματοσειράς
CAPTCHA_LETTER_ROTATION = (-35, 35)       # Τυχαία περιστροφή χαρακτήρων
CAPTCHA_BACKGROUND_COLOR = '#ffffff'      # Λευκό φόντο
CAPTCHA_FOREGROUND_COLOR = '#001100'      # Σκούρο πράσινο χρώμα χαρακτήρων
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge'  # Τυχαίοι χαρακτήρες
CAPTCHA_NOISE_FUNCTIONS = ('captcha.helpers.noise_dots',)         # Προσθήκη θορύβου με τελείες
CAPTCHA_TIMEOUT = 5                       # 5 λεπτά χρόνος λήξης


# ============================================================================
# RATE LIMITING CONFIGURATION
# Χρησιμότητα: Ρυθμίσεις για rate limiting
# ============================================================================

# =============================================================================
# ΜΗΧΑΝΙΣΜΟΣ ΠΕΡΙΟΡΙΣΜΟΥ ΡΥΘΜΟΥ ΑΙΤΗΜΑΤΩΝ (RATE LIMITING)
# =============================================================================
# Η προστασία rate limiting περιορίζει τον αριθμό αιτημάτων που μπορεί
# να κάνει ένας χρήστης σε συγκεκριμένο χρονικό διάστημα.
# Αυτό προστατεύει από:
# - DoS επιθέσεις
# - Απόπειρες brute force σε φόρμες
# - Κατάχρηση API
# - Scraping δεδομένων
# Rate limiting error message
RATELIMIT_VIEW = 'eshop.views.ratelimit_error'

# Rate limit cache
RATELIMIT_USE_CACHE = 'default'

# ============================================================================
# CACHE CONFIGURATION
# ============================================================================

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    },
    'dns_cache': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'dns-lookup-cache',
        'TIMEOUT': 3600,  # Cache DNS results for 1 hour
        'OPTIONS': {
            'MAX_ENTRIES': 1000,  # Maximum number of entries in the cache
        }
    }
}

# ============================================================================
# LOGGING CONFIGURATION
# Χρησιμότητα: Καταγραφή γεγονότων για debugging και security monitoring
# ============================================================================

# =============================================================================
# ΟΛΟΚΛΗΡΩΜΕΝΟ ΣΥΣΤΗΜΑ ΚΑΤΑΓΡΑΦΗΣ ΣΥΜΒΑΝΤΩΝ
# =============================================================================
# Το σύστημα καταγραφής είναι κρίσιμο για:
# 1. Εντοπισμό επιθέσεων σε πραγματικό χρόνο
# 2. Ανάλυση ασφάλειας μετά από περιστατικά
# 3. Παρακολούθηση συμπεριφοράς χρηστών
# 4. Εντοπισμό σφαλμάτων και προβλημάτων απόδοσης
#
# Διαφορετικοί loggers για διαφορετικούς τύπους συμβάντων επιτρέπουν
# στοχευμένη παρακολούθηση και αντιμετώπιση προβλημάτων.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    
    # Formatters - Πως φαίνονται τα log messages
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    
    # Handlers - Που πάνε τα logs
    'handlers': {
        # Console output
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        # File output
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/app.log',
            'formatter': 'verbose',
        },
    },
    
    # Loggers - Ποια subsystems κάνουν logging
    'loggers': {
        # Django framework logs
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        # Security-related logs (custom)
        'security': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Order-related logs (custom)
        'orders': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# ============================================================================

# Ανάλυση Χρησιμότητας ανά Block
# 1. Imports και Environment Variables

# Ασφάλεια: Αποφυγή hardcoded passwords/keys στον κώδικα
# Ευελιξία: Διαφορετικές ρυθμίσεις για development/production
# Συντήρηση: Εύκολη αλλαγή configuration χωρίς code changes

# 2. Path Configuration

# Portability: Λειτουργεί σε διαφορετικά λειτουργικά συστήματα
# Maintainability: Κεντρικός ορισμός paths για όλο το project
# Reliability: Absolute paths αποφεύγουν προβλήματα με working directory

# 3. Security Settings (SECRET_KEY, DEBUG, ALLOWED_HOSTS)

# SECRET_KEY: Κρίσιμο για την ασφάλεια - χρησιμοποιείται σε κρυπτογραφικές λειτουργίες
# DEBUG: False σε production για να μην εκτίθενται sensitive πληροφορίες
# ALLOWED_HOSTS: Προστασία από HTTP Host header attacks

# 4. Installed Apps

# Modular Design: Κάθε app έχει συγκεκριμένη λειτουργικότητα
# Third-party Integration: Εύκολη προσθήκη έτοιμων λύσεων (axes, extensions)
# Maintainability: Clear separation of concerns

# 5. Middleware

# Layered Security: Κάθε middleware προσθέτει ένα επίπεδο προστασίας
# Performance: Σωστή σειρά για βέλτιστη απόδοση
# Functionality: Κάθε middleware παρέχει specific λειτουργικότητα

# 6. Database Configuration

# SQLite: Ιδανικό για development (zero configuration)
# Production Ready: Εύκολη αλλαγή σε PostgreSQL/MySQL για production
# Performance: Separate database για testing

# 7. Password Validation

# Security: Enforces strong passwords
# User Protection: Prevents common/weak passwords
# Compliance: Helps meet security standards

# 8. Static/Media Files

# Organization: Clear separation of code/user content
# Performance: Allows CDN/web server to serve static files
# Security: Media files isolated from code

# 9. Security Headers

# HTTPS Enforcement: Ensures encrypted communication
# XSS Protection: Multiple layers against cross-site scripting
# HSTS: Forces browsers to use HTTPS for extended periods
# CSP: Fine-grained control over resource loading

# 10. CSRF Protection

# Form Security: Prevents unauthorized form submissions
# AJAX Support: Configuration allows JavaScript access when needed
# Flexible: SameSite policy balances security/functionality

# 11. Email Configuration

# Development: Console backend for testing
# Production: Secure SMTP configuration
# Security: Credentials from environment variables

# 12. Django-axes

# Brute Force Protection: Limits login attempts
# Smart Lockout: Combines multiple parameters for effective blocking
# Monitoring: Tracks suspicious activity

# 13. Logging

# Debugging: Detailed logs for development
# Security Monitoring: Tracks security events
# Compliance: Audit trail for regulatory requirements
# Performance: Can identify bottlenecks

# Συμπέρασμα
# Αυτό το αρχείο settings.py δείχνει μια ολοκληρωμένη προσέγγιση στην ασφάλεια, με:

# Πολλαπλά επίπεδα προστασίας
# Σαφή διαχωρισμό development/production ρυθμίσεων
# Χρήση best practices για Django security
# Ευέλικτη αρχιτεκτονική για μελλοντικές επεκτάσεις

# Κάθε ρύθμιση έχει συγκεκριμένο σκοπό και συμβάλλει στη συνολική ασφάλεια και λειτουργικότητα της εφαρμογής.
# ============================================================================